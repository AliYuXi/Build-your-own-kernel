name: GKI Kernel Build
permissions:
  contents: write
  actions: write

on:
  workflow_call:
    inputs:
      make_release:
        required: true
        type: boolean
        default: true
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
      kernelsu_variant:
        required: true
        type: string
      kernelsu_branch:
        required: true
        type: string
      revision:
        required: false
        type: string
      version:
        required: false
        type: string
      use_zram:
        required: true
        type: string
        default: "true"
      use_kpm:
        required: true
        type: string
        default: "true"

jobs:
  build-kernel-kernelsu-susfs:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: 设定 CONFIG 环境变量
        run: |
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      # Steps for ccache, toolchain, secrets, repo tool are kept as in your original file
      - name: 安装 ccache
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y ccache python3 git curl

      - name: 配置 ccache
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: 从缓存中还原ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-

      - name: 缓存工具链
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            kernel-build-tools
            mkbootimg
          key: toolchain-${{ runner.os }}-v1

      - name: 下载工具链（如果未找到缓存）
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg

      - name: 设置环境变量
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: 密钥设置——已经过mkppk修改
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
            openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV

      - name: 安装仓库
        run: |
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: 克隆 AnyKernel3 和其他依赖项
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH" --depth 1
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH" --depth 1
          git clone https://github.com/WildPlusKernel/kernel_patches.git --depth 1
          git clone https://github.com/ShirkNeko/SukiSU_patch.git --depth 1
      
      - name: 初始化和同步内核源代码
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          echo "Initializing and syncing kernel source..."
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          $REPO init --depth=1 -u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            echo "Found deprecated branch: $FORMATTED_BRANCH"
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          $REPO --version
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: 确定 KernelSU 的分支
        run: |
          # This logic is kept as you provided
          if [[ "${{ inputs.kernelsu_branch }}" == "Stable(标准)" ]]; then
            echo "BRANCH=-" >> $GITHUB_ENV
          elif [[ "${{ inputs.kernelsu_branch }}" == "Dev(开发)" && ( "${{ inputs.kernelsu_variant }}" == "Official" || "${{ inputs.kernelsu_variant }}" == "MKSU" ) ]]; then
            echo "BRANCH=-s main" >> $GITHUB_ENV
          elif [[ "${{ inputs.kernelsu_branch }}" == "Dev(开发)" && "${{ inputs.kernelsu_variant }}" == "Next" ]]; then
            echo "BRANCH=-s next" >> $GITHUB_ENV
          elif [[ "${{ inputs.kernelsu_branch }}" == "Stable(标准)" && ( "${{ inputs.kernelsu_variant }}" == "SukiSU" ) ]]; then
            echo "BRANCH=-" >> $GITHUB_ENV
          elif [[ "${{ inputs.kernelsu_branch }}" == "Dev(开发)" && ( "${{ inputs.kernelsu_variant }}" == "SukiSU" ) ]]; then
            echo "BRANCH=-s susfs-dev" >> $GITHUB_ENV
          else
            echo "Error: Custom branch not provided for 'Other(其他/指定)' or unhandled combination" >&2
            # exit 1 # Consider if an error should halt the process
          fi

      - name: 添加 KernelSU
        run: |
          # This logic is kept as you provided
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "Adding KernelSU Official..."
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash $BRANCH
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "Adding KernelSU Next..."
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash $BRANCH
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "Adding KernelSU MKSU..."
            curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash $BRANCH
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "Adding KernelSU SukiSU..."
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash $BRANCH
          fi

      - name: 为 KernelSU 变体安装 SUSFS 补丁
        run: |
          # This logic is kept as you provided
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          echo "Applying SUSFS patches..."
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "Applying SUSFS patches for Official KernelSU..."
            cd ./KernelSU
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "Applying SUSFS patches for KernelSU-Next..."
            cd ./KernelSU-Next
            cp ../../kernel_patches/next/kernel-patch-susfs-v1.5.7-to-KernelSU-Next.patch ./
            patch -p1 --forward --fuzz=3 < kernel-patch-susfs-v1.5.7-to-KernelSU-Next.patch
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "Applying SUSFS patches for MKSU..."
            cd ./KernelSU
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
            echo "Applying MKSU specific SUSFS patch..."
            cp ../../kernel_patches/mksu/mksu_susfs.patch ./
            patch -p1 < mksu_susfs.patch || true
            cp ../../kernel_patches/mksu/fix.patch ./
            patch -p1 < fix.patch || true
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "Applying SUSFS patches for SukiSU..."
            cd ./KernelSU # Assuming SukiSU also uses KernelSU directory for these base patches
            echo "SukiSU specific SUSFS patch logic here if needed."
          else
            echo "Invalid KernelSU variant selected for SUSFS patching!"
            exit 1
          fi
          cd ../common 
          patch -p1 --fuzz=3 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          if [ "$FORMATTED_BRANCH" == "android15-6.6-2024-08" ] || [ "$FORMATTED_BRANCH" == "android15-6.6-2024-09" ]; then
            echo "Applying fix 6.6.30 6.6.30&46 patches"
            curl -LSs https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/fix/fix6.6.patch -o test.patch
            patch -p1 < test.patch || true
          fi

      - name: 应用新的HOOKS补丁
        run: |
          # This logic is kept as you provided
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/common"
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "Applying hooks for KernelSU-Next..."
            cp ../../kernel_patches/next/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "Applying hooks for SukiSU..."
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch
          fi

      - name: 复制源文件&应用LZ4KD&ZSTDN补丁
        if: ${{ inputs.use_zram == 'true' }} # FIXED: Explicit string comparison
        run: |
          # This logic is kept as you provided
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/common"
          cp -r ../../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
          cp -r ../../SukiSU_patch/other/zram/lz4k/lib/* ./lib/
          cp -r ../../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/
          cp -r ../../SukiSU_patch/other/zram/lz4k_oplus ./lib/
          cp ../../SukiSU_patch/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4kd.patch ./
          echo "正在打lz4kd补丁"
          patch -p1 -F 3 < lz4kd.patch || true
          echo '完成LZ4KD补丁'
          cp ../../SukiSU_patch/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4k_oplus.patch ./
          echo "正在打lz4k_oplus补丁"
          patch -p1 -F 3 < lz4k_oplus.patch || true
          echo '完成lz4k_oplus补丁'

      - name: 应用隐藏某特征的补丁
        run: |
          # This logic is kept as you provided
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/common"
          if [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            cp ../../SukiSU_patch/69_hide_stuff.patch ./
            patch -p1 -F 3 < 69_hide_stuff.patch
          else
            cp ../../kernel_patches/69_hide_stuff.patch ./
            patch -p1 -F 3 < 69_hide_stuff.patch
          fi

      - name: LZ4KD&Lz4k_oplus配置
        if: ${{ inputs.use_zram == 'true' }} # FIXED: Explicit string comparison
        run: |
          # This logic is kept as you provided
          echo "写入LZ4KD&ZSTDN config依赖"
          CONFIG_FILE="$CONFIG/common/arch/arm64/configs/gki_defconfig"
          # ... (rest of your original zram config logic) ...
          if [ "${{ inputs.kernel_version }}" = "5.10" ]; then
            echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE"
            echo "CONFIG_MODULE_SIG=n" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZO=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM_DEF_COMP_LZ4KD=y" >> "$CONFIG_FILE"
          fi
          if [ "${{ inputs.kernel_version }}" != "6.6" ] && [ "${{ inputs.kernel_version }}" != "5.10" ]; then
            if grep -q "CONFIG_ZSMALLOC" -- "$CONFIG_FILE"; then
              echo "提示：文件 $CONFIG_FILE 包含字符串 CONFIG_ZSMALLOC。"
              sed -i 's/CONFIG_ZSMALLOC=m/CONFIG_ZSMALLOC=y/g' "$CONFIG_FILE"
            else
              echo "警告：文件 $CONFIG_FILE 不包含字符串 CONFIG_ZSMALLOC。"
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
            fi
            sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
          fi
          if [ "${{ inputs.kernel_version }}" = "6.6" ]; then
            echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
            sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
          fi
          if [ "${{ inputs.android_version }}" = "android14" ] || [ "${{ inputs.android_version }}" = "android15" ]; then
            sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "$CONFIG/common/modules.bzl"
            echo "CONFIG_MODULE_SIG_FORCE=n" >> "$CONFIG_FILE"
            echo 'Android14_Bazel:已修复zram&zsmalloc'
          elif [ "${{ inputs.kernel_version }}" = "5.10" ] || [ "${{ inputs.kernel_version }}" = "5.15" ]; then
            rm -f "$CONFIG/common/android/gki_aarch64_modules"
            touch "$CONFIG/common/android/gki_aarch64_modules"
            echo '5.10&5.15:已修复zram&zsmalloc'
          fi
          if grep -q "CONFIG_ZSMALLOC=y" "$CONFIG_FILE" && grep -q "CONFIG_ZRAM=y" "$CONFIG_FILE"; then
            echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
          fi

      - name: 添加所有管理器
        run: |
          # This logic is kept as you provided
          cd "$CONFIG"
          MANAGER_PATCH_APPLIED=false # Initialize flag
          case "${{ inputs.kernelsu_variant }}" in
            "Official")
              echo "Applying Manager patch for Official KernelSU..."
              # cp ../kernel_patches/ksu/manager.patch ./
              # if [ -f "./manager.patch" ]; then patch -p1 --fuzz=3 < manager.patch && MANAGER_PATCH_APPLIED=true; fi
              ;;
            "Next") # Corrected from NEXT to Next to match options
              echo "Applying Manager patch for KernelSU Next..."
              if [ -d "./KernelSU-Next" ]; then
                  cd KernelSU-Next
                  if [ -f "../../kernel_patches/next/manager.patch" ]; then
                      cp ../../kernel_patches/next/manager.patch ./
                      patch -p1 --fuzz=3 < manager.patch && MANAGER_PATCH_APPLIED=true
                  else
                      echo "Warning: KernelSU-Next manager patch not found."
                  fi
                  cd .. 
              else
                  echo "Warning: KernelSU-Next directory not found in $CONFIG."
              fi
              ;;
            "MKSU")
              echo "Applying Manager patch for MKSU..."
              # cp ../kernel_patches/mksu/manager.patch ./
              # if [ -f "./manager.patch" ]; then patch -p1 --fuzz=3 < manager.patch && MANAGER_PATCH_APPLIED=true; fi
              ;;
          esac
          # Original script had 'patch -p1 --fuzz=3 < manager.patch || echo "No Manager Patch"' outside case
          # This assumes manager.patch is in $CONFIG dir after case, which might not be true if cp was conditional
          if $MANAGER_PATCH_APPLIED; then
            echo "Manager patch applied successfully."
          else
            echo "No specific Manager Patch was applied or patch command failed for variant ${{ inputs.kernelsu_variant }}."
          fi

      - name: 添加SUSFS配置设置
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG" 
          echo "Adding configuration settings to gki_defconfig..."
          GKI_DEFCONFIG_PATH="./common/arch/arm64/configs/gki_defconfig"

          echo "CONFIG_KSU=y" >> "$GKI_DEFCONFIG_PATH"

          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "CONFIG_KSU_WITH_KPROBES=n" >> "$GKI_DEFCONFIG_PATH"
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$GKI_DEFCONFIG_PATH"
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            # --- FIXED KPM LOGIC ---
            if [ "${{ inputs.use_kpm }}" = "true" ]; then # Explicitly check for string "true"
              echo "CONFIG_KPM=y" >> "$GKI_DEFCONFIG_PATH"
              echo "KPM for SukiSU variant ENABLED as per use_kpm input."
            else # inputs.use_kpm is "false" or any other string
              sed -i '/^CONFIG_KPM=.*$/d' "$GKI_DEFCONFIG_PATH" # Remove any existing CONFIG_KPM line
              echo "CONFIG_KPM=n" >> "$GKI_DEFCONFIG_PATH" # Explicitly set to n
              echo "KPM for SukiSU variant DISABLED as per use_kpm input."
            fi
            # --- END FIXED KPM LOGIC ---
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$GKI_DEFCONFIG_PATH"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$GKI_DEFCONFIG_PATH"
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$GKI_DEFCONFIG_PATH"
          fi
          
          echo "CONFIG_TMPFS_XATTR=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_NET_SCH_FQ=y" >> "$GKI_DEFCONFIG_PATH"
          # Kept your original way of setting these to 'n'
          echo "CONFIG_TCP_CONG_BIC=n" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$GKI_DEFCONFIG_PATH"
          
          if [ -f "./common/build.config.gki" ]; then # Check file exists before sed
            sed -i 's/check_defconfig//' ./common/build.config.gki
          else
            echo "Warning: ./common/build.config.gki not found, skipping sed for check_defconfig."
          fi

          echo "CONFIG_KSU_SUSFS=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$GKI_DEFCONFIG_PATH"

      - name: 配置内核名称
        run: |
          # This logic is kept as you provided
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          if [ ! -z "${{ inputs.version }}" ]; then
            echo "版本号不为空,设置为: ${{ inputs.version }}"
            sed -i '$s|echo "\$res"|echo "${{ inputs.version }}"|' ./common/scripts/setlocalversion
          else
            echo "版本号为空, 使用默认setlocalversion行为"
          fi
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Sat Apr 20 04:20:00 UTC 2024"}' ./common/scripts/mkcompile_h
          if [ -f "build/build.sh" ]; then 
            sed -i 's/-dirty//' ./common/scripts/setlocalversion
          else 
            sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
            if [ ! -z "${{ inputs.version }}" ]; then # Only append if version is not empty
                 sed -E -i '/^CONFIG_LOCALVERSION=/ s/(.*)"$/\1${{ inputs.version }}"/' ./common/arch/arm64/configs/gki_defconfig
            fi
          fi

      - name: Build with retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_on: timeout
          command: |
            set -e
            set -x 
            cd "$CONFIG"
            echo "Building the kernel..."
            if [ -f "build/build.sh" ]; then 
              LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang" || exit 1
            else 
              tools/bazel build --disk_cache=/home/runner/.cache/bazel --config=fast --lto=thin //common:kernel_aarch64_dist || exit 1
            fi
            ccache --show-stats

      - name: 修补 Image 文件 安卓12和安卓13(仅限sukisu)
        if: ${{ inputs.use_kpm == 'true' && inputs.kernelsu_variant == 'SukiSU' && (inputs.android_version == 'android12' || inputs.android_version == 'android13') }} # FIXED
        run: |
          # This logic is kept as you provided, with minor path safety
          if [ "${{ inputs.kernel_version }}" != "6.6" ]; then 
            echo "Patching Image file for Android 12/13 SukiSU KPM..."
            IMAGE_PATH="$GITHUB_WORKSPACE/$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist"
            if [ -d "$IMAGE_PATH" ]; then
              cd "$IMAGE_PATH" 
              curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
              chmod +x patch # Ensure executable
              ./patch
              rm -f Image 
              mv oImage Image
              cd $GITHUB_WORKSPACE # Return to original GITHUB_WORKSPACE
            else
              echo "Warning: Image path $IMAGE_PATH not found for patching (Android 12/13)."
            fi
          fi

      - name: 修补 Image 文件 安卓14和安卓15(仅限sukisu)
        if: ${{ inputs.use_kpm == 'true' && inputs.kernelsu_variant == 'SukiSU' && (inputs.android_version == 'android14' || inputs.android_version == 'android15') }} # FIXED
        run: |
          # This logic is kept as you provided, with minor path safety
          if [ "${{ inputs.kernel_version }}" != "6.6" ]; then 
            echo "Patching Image file for Android 14/15 SukiSU KPM..."
            IMAGE_PATH="$GITHUB_WORKSPACE/$CONFIG/bazel-bin/common/kernel_aarch64/"
            if [ -d "$IMAGE_PATH" ]; then
              cd "$IMAGE_PATH"
              curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
              chmod +x patch # Ensure executable
              ./patch
              rm -f Image 
              mv oImage Image
              cd $GITHUB_WORKSPACE # Return to original GITHUB_WORKSPACE
            else
              echo "Warning: Image path $IMAGE_PATH not found for patching (Android 14/15)."
            fi
          fi

      - name: 创建Bootimgs文件夹并复制镜像 (Android 12/13)
        if: ${{ inputs.android_version == 'android12' || inputs.android_version == 'android13' }}
        run: |
          mkdir -p $GITHUB_WORKSPACE/bootimgs 
          echo "Copying images for Android 12/13..."
          SOURCE_IMAGE_DIR="$GITHUB_WORKSPACE/$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist"
          # Copy to ./bootimgs and also to $GITHUB_WORKSPACE for zipping later
          if [ -f "$SOURCE_IMAGE_DIR/Image" ]; then cp "$SOURCE_IMAGE_DIR/Image" $GITHUB_WORKSPACE/bootimgs/; cp "$SOURCE_IMAGE_DIR/Image" $GITHUB_WORKSPACE/; else echo "Warning: $SOURCE_IMAGE_DIR/Image not found"; fi
          if [ -f "$SOURCE_IMAGE_DIR/Image.lz4" ]; then cp "$SOURCE_IMAGE_DIR/Image.lz4" $GITHUB_WORKSPACE/bootimgs/; cp "$SOURCE_IMAGE_DIR/Image.lz4" $GITHUB_WORKSPACE/; else echo "Warning: $SOURCE_IMAGE_DIR/Image.lz4 not found"; fi
          
          if [ -f "$GITHUB_WORKSPACE/Image" ]; then
            echo "Creating $GITHUB_WORKSPACE/Image.gz from $GITHUB_WORKSPACE/Image"
            gzip -n -k -f -9 "$GITHUB_WORKSPACE/Image" # FIXED: Correct gzip usage
          else
            echo "Error: $GITHUB_WORKSPACE/Image not found for gzipping."
            # Consider exiting if this is critical: exit 1
          fi

      - name: 创建Bootimgs文件夹并复制镜像 (Android 14/15)
        if: ${{ inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          mkdir -p $GITHUB_WORKSPACE/bootimgs 
          echo "Copying images for Android 14/15..."
          SOURCE_IMAGE_DIR="$GITHUB_WORKSPACE/$CONFIG/bazel-bin/common/kernel_aarch64"
          # Copy to ./bootimgs and also to $GITHUB_WORKSPACE for zipping later
          if [ -f "$SOURCE_IMAGE_DIR/Image" ]; then cp "$SOURCE_IMAGE_DIR/Image" $GITHUB_WORKSPACE/bootimgs/; cp "$SOURCE_IMAGE_DIR/Image" $GITHUB_WORKSPACE/; else echo "Warning: $SOURCE_IMAGE_DIR/Image not found"; fi
          if [ -f "$SOURCE_IMAGE_DIR/Image.lz4" ]; then cp "$SOURCE_IMAGE_DIR/Image.lz4" $GITHUB_WORKSPACE/bootimgs/; cp "$SOURCE_IMAGE_DIR/Image.lz4" $GITHUB_WORKSPACE/; else echo "Warning: $SOURCE_IMAGE_DIR/Image.lz4 not found"; fi

          if [ -f "$GITHUB_WORKSPACE/Image" ]; then
            echo "Creating $GITHUB_WORKSPACE/Image.gz from $GITHUB_WORKSPACE/Image"
            gzip -n -k -f -9 "$GITHUB_WORKSPACE/Image" # FIXED: Correct gzip usage
          else
            echo "Error: $GITHUB_WORKSPACE/Image not found for gzipping."
            # Consider exiting if this is critical: exit 1
          fi

      - name: 创建不同格式的ZIP文件
        run: |
          # This logic is kept as you provided, using files from $GITHUB_WORKSPACE
          echo "Creating zip files for all formats..."
          cd $GITHUB_WORKSPACE/AnyKernel3 # Ensure correct path

          if [ -f "$GITHUB_WORKSPACE/Image" ]; then
            ZIP_NAME="${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AnyKernel3.zip"
            echo "Creating zip file: $ZIP_NAME..."
            mv "$GITHUB_WORKSPACE/Image" ./Image # Original was mv ../Image
            zip -r9 "$GITHUB_WORKSPACE/$ZIP_NAME" ./* -x ".*" -x "__MACOSX" -x ".DS_Store"
            rm ./Image
          else
            echo "Warning: $GITHUB_WORKSPACE/Image not found for AnyKernel3.zip"
          fi

          if [ -f "$GITHUB_WORKSPACE/Image.lz4" ]; then
            ZIP_NAME_LZ4="${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AnyKernel3-lz4.zip"
            echo "Creating zip file: $ZIP_NAME_LZ4..."
            mv "$GITHUB_WORKSPACE/Image.lz4" ./Image.lz4 # Original was mv ../Image.lz4
            zip -r9 "$GITHUB_WORKSPACE/$ZIP_NAME_LZ4" ./* -x ".*" -x "__MACOSX" -x ".DS_Store"
            rm ./Image.lz4
          else
            echo "Warning: $GITHUB_WORKSPACE/Image.lz4 not found for AnyKernel3-lz4.zip"
          fi
          
          if [ -f "$GITHUB_WORKSPACE/Image.gz" ]; then 
            ZIP_NAME_GZ="${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AnyKernel3-gz.zip"
            echo "Creating zip file: $ZIP_NAME_GZ..."
            mv "$GITHUB_WORKSPACE/Image.gz" ./Image.gz # Original was mv ../Image.gz
            zip -r9 "$GITHUB_WORKSPACE/$ZIP_NAME_GZ" ./* -x ".*" -x "__MACOSX" -x ".DS_Store"
            rm ./Image.gz
          else
            echo "Warning: $GITHUB_WORKSPACE/Image.gz not found for AnyKernel3-gz.zip"
          fi
          cd $GITHUB_WORKSPACE 

      - name: 运行boot镜像 ${{ inputs.android_version }} 编译脚本 (Android 12)
        if: ${{ inputs.android_version == 'android12' }}
        run: |
          # This logic is kept as you provided, with corrected gzip
          echo "Changing to bootimgs directory: $GITHUB_WORKSPACE/bootimgs"
          cd $GITHUB_WORKSPACE/bootimgs
          if [ ! -f "./Image" ]; then echo "Error: Image not found in bootimgs/ for Android 12 boot.img creation."; exit 1; fi

          GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-"${{ inputs.os_patch_level }}"_"${{ inputs.revision }}".zip
          FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2023-01_r1.zip
          
          echo "Checking if GKI kernel URL is reachable: $GKI_URL"
          status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)
          if [ "$status" = "200" ]; then
            echo "[+] Downloading from GKI_URL"
            curl -LSso gki-kernel.zip "$GKI_URL" 
          else
            echo "[+] $GKI_URL not found (status: $status), using $FALLBACK_URL"
            curl -LSso gki-kernel.zip "$FALLBACK_URL"
          fi
          
          echo "Unzipping the downloaded kernel..."
          unzip -oq gki-kernel.zip && rm gki-kernel.zip 

          BASE_BOOT_IMG="boot-5.10.img" 
          if [ ! -f "$BASE_BOOT_IMG" ]; then 
            echo "Warning: $BASE_BOOT_IMG not found. Looking for other boot*.img files..."
            BASE_BOOT_IMG_FOUND=$(ls boot*.img 2>/dev/null | head -n 1) # Handle if no boot*.img found
            if [ -z "$BASE_BOOT_IMG_FOUND" ] || [ ! -f "$BASE_BOOT_IMG_FOUND" ]; then
              echo "Error: No boot*.img found after unzipping GKI."; ls -la; exit 1;
            fi
            BASE_BOOT_IMG="$BASE_BOOT_IMG_FOUND" # Use found image
            echo "Found GKI boot image: $BASE_BOOT_IMG"
          fi
          
          mkdir -p ./out 
          $UNPACK_BOOTIMG --boot_img="$BASE_BOOT_IMG" --out=./out 
          if [ ! -d "./out" ] || [ ! -f "./out/ramdisk" ]; then echo "Error: unpack_bootimg failed or ramdisk not found in ./out."; exit 1; fi
          
          echo "Building Image.gz from ./Image (in bootimgs/)"
          gzip -n -k -f -9 ./Image # FIXED: Correct gzip usage
          if [ ! -f "./Image.gz" ]; then echo "Error: Image.gz not created in bootimgs/."; exit 1; fi

          RAMDISK_PATH="./out/ramdisk"

          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img --ramdisk "$RAMDISK_PATH" --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img "$GITHUB_WORKSPACE/${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot.img"

          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img --ramdisk "$RAMDISK_PATH" --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img "$GITHUB_WORKSPACE/${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-gz.img"

          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img --ramdisk "$RAMDISK_PATH" --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img "$GITHUB_WORKSPACE/${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-lz4.img"
          cd $GITHUB_WORKSPACE 

      - name: 运行boot镜像 ${{ inputs.android_version }} 编译脚本 (Android 13/14/15)
        if: ${{ inputs.android_version == 'android13' || inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          # This logic is kept as you provided, with corrected gzip
          echo "Changing to bootimgs directory: $GITHUB_WORKSPACE/bootimgs"
          cd $GITHUB_WORKSPACE/bootimgs
          if [ ! -f "./Image" ]; then echo "Error: Image not found in bootimgs/ for boot.img creation."; exit 1; fi
          
          echo "Building Image.gz from ./Image (in bootimgs/)"
          gzip -n -k -f -9 ./Image # FIXED: Correct gzip usage
          if [ ! -f "./Image.gz" ]; then echo "Error: Image.gz not created in bootimgs/."; exit 1; fi

          echo "Building boot.img (kernel only)"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img "$GITHUB_WORKSPACE/${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot.img"

          echo "Building boot-gz.img (kernel only)"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img "$GITHUB_WORKSPACE/${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-gz.img"

          echo "Building boot-lz4.img (kernel only)"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img "$GITHUB_WORKSPACE/${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-lz4.img"
          cd $GITHUB_WORKSPACE

      - name: 上传编译资产
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.kernelsu_variant }}_kernel-${{ env.CONFIG }} 
          path: |
            ${{ github.workspace }}/*AnyKernel3.zip
            ${{ github.workspace }}/*.img 
          retention-days: 7