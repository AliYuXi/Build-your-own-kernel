name: A编译内核test
permissions:
  contents: write
  actions: write
on:
  workflow_dispatch:
    inputs:
      kernel_to_build:
        description: "选择要编译的内核版本 (安卓版本_内核版本_子级别_OS补丁级别_修订号)"
        required: true
        type: choice
        options:
          - "android12_5.10_168_2023-04_r9"
          - "android12_5.10_198_2024-01_r17"
          - "android12_5.10_205_2024-03_r9"
          - "android12_5.10_209_2024-05_r13"
          - "android12_5.10_218_2024-08_r14"
          - "android12_5.10_226_2024-11_r8"
          - "android12_5.10_233_2025-02_r1"
          - "android12_5.10_X_lts_r1"
          - "android13_5.10_198_2024-01_"
          - "android13_5.10_205_2024-03_"
          - "android13_5.10_209_2024-05_"
          - "android13_5.10_214_2024-07_"
          - "android13_5.10_218_2024-08_"
          - "android13_5.10_223_2024-11_"
          - "android13_5.10_228_2025-01_"
          - "android13_5.10_X_lts_"
          - "android13_5.15_123_2023-11_"
          - "android13_5.15_137_2024-01_"
          - "android13_5.15_144_2024-03_"
          - "android13_5.15_148_2024-05_"
          - "android13_5.15_151_2024-08_"
          - "android13_5.15_167_2024-11_"
          - "android13_5.15_170_2025-01_"
          - "android13_5.15_X_lts_"
          - "android14_5.15_131_2023-11_"
          - "android14_5.15_137_2024-01_"
          - "android14_5.15_144_2024-03_"
          - "android14_5.15_148_2024-05_"
          - "android14_5.15_149_2024-06_"
          - "android14_5.15_153_2024-07_"
          - "android14_5.15_158_2024-08_"
          - "android14_5.15_167_2024-11_"
          - "android14_5.15_170_2025-01_"
          - "android14_6.1_75_2024-05_"
          - "android15_6.6_50_2024-10_"
          - "android15_6.6_56_2024-11_"
          - "android15_6.6_57_2024-12_"
          - "android15_6.6_58_2025-01_"
          - "android15_6.6_66_2025-02_"
          - "android15_6.6_77_2025-03_"
          - "android15_6.6_X_lts_"
        default: "android14_6.1_75_2024-05_"
      kernelsu_branch: # 用户要求保留此项
        description: "选择SukiSU分支"
        required: true
        type: choice
        options:
          - Stable
          - Dev
          - Other
        default: Dev
      custom_version_suffix:
        description: '自定义内核版本后缀 (留空则随机生成)'
        required: false
        type: string
      # --- 新增输入项：自定义编译时间戳 ---
      custom_build_timestamp:
        description: "自定义内核编译时间戳 (格式: 'Day Mon DD HH:MM:SS UTC YYYY', 例如: 'Wed May 15 12:30:00 UTC 2025'). 留空则使用当前编译时间."
        required: false
        type: string
        default: "Wed May 15 12:30:00 UTC 2025"
      # --- 新增输入项结束 ---
      use_zram:
        description: '是否开启增加更多ZRAM算法?'
        required: true
        type: boolean
        default: true
      use_kpm:
        description: '是否开启KPM功能?'
        required: true
        type: boolean
        default: true

jobs:
  determine_sukisu_version:
    name: 获取 SukiSU 版本信息
    runs-on: ubuntu-latest
    outputs:
      job_name_suffix: ${{ steps.calculate_version.outputs.job_suffix }}
      sukisu_version: ${{ steps.calculate_version.outputs.suki_version_actual }}
    steps:
      - name: 安装 Git
        run: sudo apt-get update && sudo apt-get install -y git
      - name: 计算 SukiSU 版本号
        id: calculate_version
        shell: bash
        run: |
          suki_version_num_for_name="00000"
          suki_version_actual_for_output="00000"
          job_suffix_text=""
          SUKI_REPO_URL="https://github.com/ShirkNeko/SukiSU-Ultra.git"
          CLONE_BRANCH="main"
          if git clone --branch "$CLONE_BRANCH" --single-branch "$SUKI_REPO_URL" SukiSU_temp_for_version; then
            cd SukiSU_temp_for_version
            commit_count=$(git rev-list --count HEAD 2>/dev/null || echo 0)
            if [[ "$commit_count" -ne "0" && "$commit_count" != "err"* ]]; then
              suki_version_num_for_name=$(expr $commit_count + 10606)
              suki_version_actual_for_output=$suki_version_num_for_name
              job_suffix_text=" (SukiSU $suki_version_num_for_name)"
            else
              job_suffix_text=" (SukiSU - 版本计算失败)"
            fi
            cd ..
            rm -rf SukiSU_temp_for_version
          else
            job_suffix_text=" (SukiSU - 克隆失败)"
          fi
          echo "job_suffix=${job_suffix_text}" >> $GITHUB_OUTPUT
          echo "suki_version_actual=${suki_version_actual_for_output}" >> $GITHUB_OUTPUT

  build_kernel:
    name: 编译内核(SukiSU)${{ github.event.inputs.kernel_to_build }}${{ needs.determine_sukisu_version.outputs.job_name_suffix }}
    needs: determine_sukisu_version
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      SUKI_VERSION_NUM_FROM_PREVIOUS_JOB: ${{ needs.determine_sukisu_version.outputs.sukisu_version }}

    steps:
      - name: Parse Kernel Selection and Set Parameters
        id: parse_kernel
        run: |
          IFS='_' read -r av kv sl opl rev_raw <<< "${{ github.event.inputs.kernel_to_build }}"
          echo "SELECTED_ANDROID_VERSION=$av" >> $GITHUB_ENV
          echo "SELECTED_KERNEL_VERSION=$kv" >> $GITHUB_ENV
          echo "SELECTED_SUB_LEVEL=$sl" >> $GITHUB_ENV
          echo "SELECTED_OS_PATCH_LEVEL=$opl" >> $GITHUB_ENV
          rev="${rev_raw:-}"
          echo "SELECTED_REVISION=$rev" >> $GITHUB_ENV
      - name: Generate Kernel Suffixes (for Kernel Name and Artifact Name)
        id: generate_suffixes
        env:
          USER_PROVIDED_SUFFIX: ${{ github.event.inputs.custom_version_suffix }}
          SELECTED_AV_ENV: ${{ env.SELECTED_ANDROID_VERSION }}
          SELECTED_KV_ENV: ${{ env.SELECTED_KERNEL_VERSION }}
        run: |
          final_kernel_local_version=""
          artifact_name_suffix_part=""
          current_date=$(date +%Y%m%d)
          if [[ -n "$USER_PROVIDED_SUFFIX" ]]; then
            final_kernel_local_version="$USER_PROVIDED_SUFFIX"
            artifact_name_suffix_part="$USER_PROVIDED_SUFFIX"
          else
            kernel_fixed_part_for_localversion=""
            if [ "$SELECTED_AV_ENV" == "android12" ] && [ "$SELECTED_KV_ENV" == "5.10" ]; then
              kernel_fixed_part_for_localversion="-android12-9"
            elif [ "$SELECTED_AV_ENV" == "android13" ] && [ "$SELECTED_KV_ENV" == "5.10" ]; then
              kernel_fixed_part_for_localversion="-android13-9"
            elif [ "$SELECTED_AV_ENV" == "android13" ] && [ "$SELECTED_KV_ENV" == "5.15" ]; then
              kernel_fixed_part_for_localversion="-android13-8"
            elif [ "$SELECTED_AV_ENV" == "android14" ] && [ "$SELECTED_KV_ENV" == "6.1" ]; then
              kernel_fixed_part_for_localversion="-android14-11"
            elif [ "$SELECTED_AV_ENV" == "android15" ] && [ "$SELECTED_KV_ENV" == "6.6" ]; then
              kernel_fixed_part_for_localversion="-android15-8"
            else 
              kernel_fixed_part_for_localversion="-${SELECTED_AV_ENV}-${SELECTED_KV_ENV//./_}-custom"
            fi
            prefix1="gd"
            prefix2="ab"
            random_hex_11=$(head /dev/urandom | LC_ALL=C tr -dc 'a-f0-9' | head -c 11 || true)
            random_digits_8=$(head /dev/urandom | LC_ALL=C tr -dc '0-9' | head -c 8 || true)
            final_kernel_local_version="${kernel_fixed_part_for_localversion}-${prefix1}${random_hex_11}-${prefix2}${random_digits_8}"
            artifact_name_suffix_part="-${current_date}"
          fi
          echo "FINAL_KERNEL_LOCAL_VERSION=${final_kernel_local_version}" >> "$GITHUB_ENV"
          echo "ARTIFACT_NAME_SUFFIX_PART=${artifact_name_suffix_part}" >> "$GITHUB_ENV"
      - name: Adjust KPM setting
        run: |
          if [[ "${{ env.SELECTED_ANDROID_VERSION }}" == "android15" && "${{ env.SELECTED_KERNEL_VERSION }}" == "6.6" ]]; then
            echo "EFFECTIVE_USE_KPM=false" >> $GITHUB_ENV
          else
            echo "EFFECTIVE_USE_KPM=${{ github.event.inputs.use_kpm }}" >> $GITHUB_ENV
          fi
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
      - name: 设定 CONFIG 环境变量
        run: |
          JOB_CONFIG="${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}-${{ env.SELECTED_SUB_LEVEL }}"
          echo "CONFIG=$JOB_CONFIG" >> $GITHUB_ENV
      - name: 安装 ccache
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y ccache python3 git curl
      - name: 配置 ccache
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
      - name: 从缓存中还原ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}-${{ env.SELECTED_SUB_LEVEL }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}-${{ env.SELECTED_SUB_LEVEL }}-ccache-
      - name: 缓存工具链
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            kernel-build-tools
            mkbootimg
          key: toolchain-${{ runner.os }}-v1
      - name: 下载工具链（如果未找到缓存）
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024 
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg
      - name: 设置环境变量
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
      - name: 密钥设置——已经过mkppk修改
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
      - name: 安装仓库
        run: |
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV
      - name: 克隆 AnyKernel3 和其他依赖项
        run: |
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}"
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH" || \
            (git clone https://gitlab.com/simonpunk/susfs4ksu.git -b main)
          git clone https://github.com/WildPlusKernel/kernel_patches.git 
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
      - name: 初始化和同步内核源代码
        run: |
          mkdir -p "${{ env.CONFIG }}"
          cd "${{ env.CONFIG }}"
          FORMATTED_BRANCH="${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}-${{ env.SELECTED_OS_PATCH_LEVEL }}"
          $REPO init --depth=1 -u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< "$REMOTE_BRANCH"; then
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast
      - name: 确定 SukiSU (功能代码) 的分支参数 # 用户要求保留此步骤
        run: |
          KSU_SETUP_BRANCH_ARG=""
          if [[ "${{ github.event.inputs.kernelsu_branch }}" == "Stable" ]]; then # 简化选项名称匹配
            KSU_SETUP_BRANCH_ARG="" 
          elif [[ "${{ github.event.inputs.kernelsu_branch }}" == "Dev" ]]; then # 简化选项名称匹配
            KSU_SETUP_BRANCH_ARG="-s susfs-dev" 
          elif [[ "${{ github.event.inputs.kernelsu_branch }}" == "Other" ]]; then # 简化选项名称匹配
            KSU_SETUP_BRANCH_ARG="" 
          fi
          echo "KSU_BRANCH_ARG=${KSU_SETUP_BRANCH_ARG}" >> $GITHUB_ENV
      - name: 添加 SukiSU (根据选择的功能代码分支) # 用户要求保留此步骤名称
        run: |
          cd "${{ env.CONFIG }}"
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash ${{ env.KSU_BRANCH_ARG }}
      - name: 设置 SukiSU 版本号
        shell: bash
        run: |
          final_suki_version_num="${{ env.SUKI_VERSION_NUM_FROM_PREVIOUS_JOB }}"
          if [[ -z "$final_suki_version_num" || "$final_suki_version_num" == "00000" ]]; then
            final_suki_version_num="00000"
          fi
          echo "SUKI_VERSION_NUM=$final_suki_version_num" >> $GITHUB_ENV
      - name: 为 SukiSU 安装 SUSFS 补丁
        working-directory: ./${{ env.CONFIG }}
        run: |
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}.patch ./common/ || echo "SUSFS common patch copy failed"
          cp -r ../susfs4ksu/kernel_patches/fs/* ./common/fs/ || echo "SUSFS fs dir copy failed"
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ || echo "SUSFS include dir copy failed"
          KSU_SUBDIR="KernelSU"
          if [ -d "./$KSU_SUBDIR" ]; then
            cd "./$KSU_SUBDIR"
            cd .. 
          fi
          cd ./common 
          if [ -f "./50_add_susfs_in_gki-${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}.patch" ]; then
            patch -p1 --fuzz=3 < 50_add_susfs_in_gki-${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}.patch || true
          fi
          FORMATTED_BRANCH_FOR_FIX="${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}-${{ env.SELECTED_OS_PATCH_LEVEL }}"
          if [ "$FORMATTED_BRANCH_FOR_FIX" == "android15-6.6-2024-08" ] || [ "$FORMATTED_BRANCH_FOR_FIX" == "android15-6.6-2024-09" ]; then
            curl -LSs https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/fix/fix6.6.patch -o test.patch
            patch -p1 < test.patch || true
          fi
      - name: 应用新的HOOKS补丁
        working-directory: ./${{ env.CONFIG }}/common
        run: |
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch || echo "SukiSU hooks patch failed"
      - name: 复制源文件&应用LZ4KD&ZSTDN补丁
        if: ${{ github.event.inputs.use_zram == 'true' }}
        working-directory: ./${{ env.CONFIG }}/common
        run: |
          cp -r ../../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/ || echo "lz4k include copy failed"
          cp -r ../../SukiSU_patch/other/zram/lz4k/lib/* ./lib/ || echo "lz4k lib copy failed"
          cp -r ../../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/ || echo "lz4k crypto copy failed"
          cp -r ../../SukiSU_patch/other/zram/lz4k_oplus ./lib/ || echo "lz4k_oplus copy failed"
          LZ4KD_PATCH_PATH="../../SukiSU_patch/other/zram/zram_patch/${{ env.SELECTED_KERNEL_VERSION }}/lz4kd.patch"
          if [ -f "$LZ4KD_PATCH_PATH" ]; then
            cp "$LZ4KD_PATCH_PATH" ./lz4kd.patch 
            patch -p1 -F 3 < lz4kd.patch || true
          fi
          LZ4K_OPLUS_PATCH_PATH="../../SukiSU_patch/other/zram/zram_patch/${{ env.SELECTED_KERNEL_VERSION }}/lz4k_oplus.patch"
          if [ -f "$LZ4K_OPLUS_PATCH_PATH" ]; then
            cp "$LZ4K_OPLUS_PATCH_PATH" ./lz4k_oplus.patch 
            patch -p1 -F 3 < lz4k_oplus.patch || true
          fi
      - name: 应用隐藏某特征的补丁
        working-directory: ./${{ env.CONFIG }}/common
        run: |
          PATCH_FILE="../../SukiSU_patch/69_hide_stuff.patch"
          if [ -f "$PATCH_FILE" ]; then
            cp "$PATCH_FILE" ./hide_stuff.patch
            patch -p1 -F 3 < hide_stuff.patch || echo "Hide stuff patch failed"
          fi
      - name: LZ4KD&Lz4k_oplus配置
        if: ${{ github.event.inputs.use_zram == 'true' }}
        run: |
          CONFIG_FILE_PATH="${{ env.CONFIG }}/common/arch/arm64/configs/gki_defconfig"
          if [ "${{ env.SELECTED_KERNEL_VERSION }}" = "5.10" ]; then
            echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE_PATH"
            echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE_PATH"
            echo "CONFIG_MODULE_SIG=n" >> "$CONFIG_FILE_PATH"
            echo "CONFIG_CRYPTO_LZO=y" >> "$CONFIG_FILE_PATH"
            echo "CONFIG_ZRAM_DEF_COMP_LZ4KD=y" >> "$CONFIG_FILE_PATH"
          fi
          if [ "${{ env.SELECTED_KERNEL_VERSION }}" != "6.6" ] && [ "${{ env.SELECTED_KERNEL_VERSION }}" != "5.10" ]; then
            if grep -q "CONFIG_ZSMALLOC" -- "$CONFIG_FILE_PATH"; then
              sed -i 's/CONFIG_ZSMALLOC=m/CONFIG_ZSMALLOC=y/g' "$CONFIG_FILE_PATH"
            else
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE_PATH"
            fi
            sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE_PATH"
          fi
          if [ "${{ env.SELECTED_KERNEL_VERSION }}" = "6.6" ]; then
            echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE_PATH"
            sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE_PATH"
          fi
          if [ "${{ env.SELECTED_ANDROID_VERSION }}" = "android14" ] || [ "${{ env.SELECTED_ANDROID_VERSION }}" = "android15" ]; then
            if [ -f "${{ env.CONFIG }}/common/modules.bzl" ]; then
              sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "${{ env.CONFIG }}/common/modules.bzl"
            fi
            echo "CONFIG_MODULE_SIG_FORCE=n" >> "$CONFIG_FILE_PATH"
          elif [ "${{ env.SELECTED_KERNEL_VERSION }}" = "5.10" ] || [ "${{ env.SELECTED_KERNEL_VERSION }}" = "5.15" ]; then
            GKI_MODULES_FILE="${{ env.CONFIG }}/common/android/gki_aarch64_modules"
            if [ -f "$GKI_MODULES_FILE" ]; then
              rm "$GKI_MODULES_FILE"
            fi
            touch "$GKI_MODULES_FILE"
          fi
          if grep -q "CONFIG_ZSMALLOC=y" "$CONFIG_FILE_PATH" && grep -q "CONFIG_ZRAM=y" "$CONFIG_FILE_PATH"; then
            echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE_PATH"
            echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE_PATH"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE_PATH"
            echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE_PATH"
            echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE_PATH"
          fi
      - name: 添加SUSFS配置设置
        run: |
          GKI_DEFCONFIG_PATH="${{ env.CONFIG }}/common/arch/arm64/configs/gki_defconfig"
          BUILD_CONFIG_GKI_PATH="${{ env.CONFIG }}/common/build.config.gki"
          BUILD_CONFIG_BAZEL_PATH="${{ env.CONFIG }}/common/build.config.gki.aarch64"
          BUILD_SCRIPT_PATH_CHECK_CONTEXTUAL="${{ env.CONFIG }}/build/build.sh"
          echo "CONFIG_KSU=y" >> "$GKI_DEFCONFIG_PATH"
          if [[ "${{ env.EFFECTIVE_USE_KPM }}" == "true" ]]; then
            echo "CONFIG_KPM=y" >> "$GKI_DEFCONFIG_PATH"
          fi
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_TMPFS_XATTR=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_NET_SCH_FQ=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$GKI_DEFCONFIG_PATH"
          if [ -f "$BUILD_CONFIG_GKI_PATH" ]; then
            sed -i 's/check_defconfig//' "$BUILD_CONFIG_GKI_PATH"
          fi
          if [ -f "$BUILD_CONFIG_BAZEL_PATH" ]; then
            sed -i 's/check_defconfig//' "$BUILD_CONFIG_BAZEL_PATH"
          fi
          if [ -f "${{ env.CONFIG }}/common/build.config" ]; then
            sed -i 's/check_defconfig//' "${{ env.CONFIG }}/common/build.config"
          fi
          cd "${{ env.CONFIG }}"
          if [ ! -f "$BUILD_SCRIPT_PATH_CHECK_CONTEXTUAL" ]; then
            if [ -f "./common/build.config.gki.aarch64" ]; then
                echo "SKIP_KMI_STRICT_MODE_CHECK=1" >> "./common/build.config.gki.aarch64"
            elif [ -f "./common/build.config" ]; then
                  echo "SKIP_KMI_STRICT_MODE_CHECK=1" >> "./common/build.config"
            fi
          fi
          cd "$GITHUB_WORKSPACE"
          echo "CONFIG_KSU_SUSFS=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$GKI_DEFCONFIG_PATH" 
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$GKI_DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$GKI_DEFCONFIG_PATH"

      - name: 查看 mkcompile_h 修改前 # 用户要求保留此步骤
        working-directory: ./${{ env.CONFIG }}/common/scripts
        run: cat mkcompile_h || echo "mkcompile_h not found"

      - name: 配置内核名称和编译时间戳
        working-directory: ./${{ env.CONFIG }}
        run: |
          GKI_DEFCONFIG_FILE_PATH="./common/arch/arm64/configs/gki_defconfig"
          SETLOCALVERSION_SCRIPT="./common/scripts/setlocalversion"
          # --- 原有的 CONFIG_LOCALVERSION 和 setlocalversion 修改逻辑 (保持不变) ---
          if [ -f "$GKI_DEFCONFIG_FILE_PATH" ]; then
            sed -i '/^CONFIG_LOCALVERSION=/d' "$GKI_DEFCONFIG_FILE_PATH"
            echo 'CONFIG_LOCALVERSION=""' >> "$GKI_DEFCONFIG_FILE_PATH"
            sed -i '/^CONFIG_LOCALVERSION_AUTO=/d' "$GKI_DEFCONFIG_FILE_PATH"
            echo '# CONFIG_LOCALVERSION_AUTO is not set' >> "$GKI_DEFCONFIG_FILE_PATH"
          fi
          if [ -f "$SETLOCALVERSION_SCRIPT" ]; then
            if [[ -n "${{ env.FINAL_KERNEL_LOCAL_VERSION }}" ]]; then
              echo '#!/bin/sh' > "$SETLOCALVERSION_SCRIPT"
              echo 'echo "${{ env.FINAL_KERNEL_LOCAL_VERSION }}"' >> "$SETLOCALVERSION_SCRIPT"
              chmod +x "$SETLOCALVERSION_SCRIPT"
            else
              sed -i 's/-dirty//g' "$SETLOCALVERSION_SCRIPT"
            fi
          fi
          # --- 原有逻辑结束 ---
          
          # --- 新增：设置自定义或当前编译时间戳 (使用 SOURCE_DATE_EPOCH) ---
          USER_PROVIDED_TIMESTAMP_STRING="${{ github.event.inputs.custom_build_timestamp }}"
          FINAL_EPOCH_SECONDS=""
          DESIRED_HUMAN_READABLE_TIMESTAMP=""

          if [[ -n "$USER_PROVIDED_TIMESTAMP_STRING" ]]; then
            # 尝试将用户输入转换为 epoch seconds
            # 注意: date -d 对输入格式敏感，用户需按 "Day Mon DD HH:MM:SS UTC YYYY" 格式输入, 例如 "Wed May 15 12:30:00 UTC 2025"
            CONVERTED_EPOCH=$(date -u -d "$USER_PROVIDED_TIMESTAMP_STRING" +%s 2>/dev/null)
            if [[ -n "$CONVERTED_EPOCH" && "$CONVERTED_EPOCH" =~ ^[0-9]+$ ]]; then
              FINAL_EPOCH_SECONDS="$CONVERTED_EPOCH"
              # 为了 KBUILD_BUILD_TIMESTAMP，我们仍然使用用户提供的原始字符串（如果它被成功解析为纪元秒）
              # 或者从纪元秒重新生成以确保格式一致性
              DESIRED_HUMAN_READABLE_TIMESTAMP=$(date -u -d "@$FINAL_EPOCH_SECONDS" +"%a %b %d %H:%M:%S UTC %Y")
              echo "SOURCE_DATE_EPOCH_INFO: 使用用户提供的编译时间戳: $USER_PROVIDED_TIMESTAMP_STRING (解析后的Epoch: $FINAL_EPOCH_SECONDS, 用于KBUILD的格式化时间: $DESIRED_HUMAN_READABLE_TIMESTAMP)"
            else
              echo "::warning:: SOURCE_DATE_EPOCH_WARNING: 无法解析用户提供的时间戳 '$USER_PROVIDED_TIMESTAMP_STRING'. 将使用当前编译时间."
              FINAL_EPOCH_SECONDS=$(date -u +%s)
              DESIRED_HUMAN_READABLE_TIMESTAMP=$(date -u -d "@$FINAL_EPOCH_SECONDS" +"%a %b %d %H:%M:%S UTC %Y")
              echo "SOURCE_DATE_EPOCH_INFO: 用户输入解析失败，使用当前编译时间: $DESIRED_HUMAN_READABLE_TIMESTAMP (Epoch: $FINAL_EPOCH_SECONDS)"
            fi
          else
            # 用户未提供时间戳，使用当前的UTC epoch seconds
            FINAL_EPOCH_SECONDS=$(date -u +%s)
            DESIRED_HUMAN_READABLE_TIMESTAMP=$(date -u -d "@$FINAL_EPOCH_SECONDS" +"%a %b %d %H:%M:%S UTC %Y")
            echo "SOURCE_DATE_EPOCH_INFO: 用户未提供时间戳，使用当前编译时间: $DESIRED_HUMAN_READABLE_TIMESTAMP (Epoch: $FINAL_EPOCH_SECONDS)"
          fi

          echo "SOURCE_DATE_EPOCH=$FINAL_EPOCH_SECONDS" >> $GITHUB_ENV
          # 同时设置 KBUILD_BUILD_TIMESTAMP
          echo "KBUILD_BUILD_TIMESTAMP=$DESIRED_HUMAN_READABLE_TIMESTAMP" >> $GITHUB_ENV
          echo "KBUILD_BUILD_TIMESTAMP_INFO: 同时设置 KBUILD_BUILD_TIMESTAMP 为: $DESIRED_HUMAN_READABLE_TIMESTAMP"
          # --- 新增逻辑结束 ---

          # --- 原有的 perl 命令 (用户要求保留) ---
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Mon Jan 1 00:00:00 UTC 2024"}' ./common/scripts/mkcompile_h
          
          # --- 原有的 Bazel/Kleaf 相关修改逻辑 (保持不变) ---
          BUILD_SCRIPT_PATH_CHECK="./build/build.sh" 
          if [ ! -f "$BUILD_SCRIPT_PATH_CHECK" ]; then 
            COMMON_BAZEL_PATH_CHECK="./common/BUILD.bazel"
            KLEAF_STAMP_BZL_PATH_CHECK="./build/kernel/kleaf/impl/stamp.bzl"
            if [ -f "$COMMON_BAZEL_PATH_CHECK" ]; then
              sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' "$COMMON_BAZEL_PATH_CHECK"
            fi
            rm -rf ./common/android/abi_gki_protected_exports_*
            if [ -f "$KLEAF_STAMP_BZL_PATH_CHECK" ]; then
              sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" "$KLEAF_STAMP_BZL_PATH_CHECK"
            fi
          fi
          # --- 原有逻辑结束 ---
       
      - name: 查看 mkcompile_h 修改后 # 用户要求保留此步骤
        working-directory: ./${{ env.CONFIG }}/common/scripts
        run: cat mkcompile_h || echo "mkcompile_h not found"

      - name: 验证编译时间戳环境变量 # 新增验证步骤
        run: |
          echo "== 编译时间戳环境变量检查 (编译前) =="
          echo "用户输入 (custom_build_timestamp): ${{ github.event.inputs.custom_build_timestamp }}"
          echo "最终 SOURCE_DATE_EPOCH: ${SOURCE_DATE_EPOCH:-未设置}"
          echo "最终 KBUILD_BUILD_TIMESTAMP: ${KBUILD_BUILD_TIMESTAMP:-未设置}"
          if [[ -z "${SOURCE_DATE_EPOCH}" ]]; then
            echo "::error:: SOURCE_DATE_EPOCH 未能成功设置!"
          fi
          if [[ -z "${KBUILD_BUILD_TIMESTAMP}" ]]; then
            echo "::error:: KBUILD_BUILD_TIMESTAMP 未能成功设置!"
          fi

      - name: Build with retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 45
          max_attempts: 2
          retry_on: timeout
          command: |
            set -e 
            set -x 
            cd "${{ env.CONFIG }}"
            BUILD_SCRIPT_PATH="./build/build.sh"
            if [ -f "$BUILD_SCRIPT_PATH" ]; then 
              LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 BUILD_CONFIG=common/build.config.gki.aarch64 "$BUILD_SCRIPT_PATH" CC="/usr/bin/ccache clang" || exit 1
            else 
              mkdir -p /home/runner/.cache/bazel_disk_cache 
              tools/bazel build --disk_cache=/home/runner/.cache/bazel_disk_cache --config=fast --lto=thin //common:kernel_aarch64_dist || exit 1
            fi
            ccache --show-stats

      - name: 检查生成的 compile.h 内容 (尝试) # 新增验证步骤
        working-directory: ./${{ env.CONFIG }}
        env:
          EXPECTED_KBUILD_TIMESTAMP: ${{ env.KBUILD_BUILD_TIMESTAMP }}
        run: |
          echo "== compile.h 内容检查 (编译后) =="
          echo "本应使用的 KBUILD_BUILD_TIMESTAMP 是: ${EXPECTED_KBUILD_TIMESTAMP:-未传递到此步骤的环境变量中}"
          
          COMPILE_H_FILE_PATH=""
          SEARCH_PATTERNS=()

          if [ -f "./build/build.sh" ]; then
            echo "检测到 build.sh 构建系统. 在 './out' 目录下搜索..."
            # 对于 build.sh, 通常在 out/xxx/kernel-obj/include/generated/
            # 或者 out/BRANCH/common/include/generated/ (如果 common 是内核源码目录)
            SEARCH_PATTERNS+=("./out/*/kernel-obj/include/generated/compile.h")
            SEARCH_PATTERNS+=("./out/*/kernel-obj/include/generated/utsrelease.h")
            SEARCH_PATTERNS+=("./out/*/*/include/generated/compile.h") 
            SEARCH_PATTERNS+=("./out/*/*/include/generated/utsrelease.h")
            SEARCH_PATTERNS+=("./out/common/include/generated/compile.h")
            SEARCH_PATTERNS+=("./out/common/include/generated/utsrelease.h")
          else
            echo "检测到 Bazel (kleaf) 构建系统. 在 './bazel-*' 目录下搜索..."
            # 对于 Bazel, 通常在 bazel-bin 或 bazel-out
            SEARCH_PATTERNS+=("./bazel-bin/common/arch/arm64/kernel_generated_headers/include/generated/compile.h")
            SEARCH_PATTERNS+=("./bazel-bin/common/arch/arm64/kernel_generated_headers/include/generated/utsrelease.h")
            SEARCH_PATTERNS+=("./bazel-out/*/bin/common/arch/arm64/kernel_generated_headers/include/generated/compile.h")
            SEARCH_PATTERNS+=("./bazel-out/*/bin/common/arch/arm64/kernel_generated_headers/include/generated/utsrelease.h")
            # 更通用的 bazel 路径，Kleaf经常把生成的头文件放在类似 ..._generated_headers 的地方
            SEARCH_PATTERNS+=("./bazel-*/common/*/*_generated_headers/include/generated/compile.h")
            SEARCH_PATTERNS+=("./bazel-*/common/*/*_generated_headers/include/generated/utsrelease.h")
            SEARCH_PATTERNS+=("./bazel-*/kernel/include/generated/compile.h") # 有时可能更直接
            SEARCH_PATTERNS+=("./bazel-*/kernel/include/generated/utsrelease.h")
          fi
          
          echo "尝试在以下模式路径中查找 compile.h/utsrelease.h (相对于 ${{ env.CONFIG }}):"
          for loc_pattern in "${SEARCH_PATTERNS[@]}"; do
            echo "  - 正在尝试: $loc_pattern"
            # 使用 find -print -quit 来获取第一个匹配项
            FOUND_FILE=$(find . -path "$loc_pattern" -print -quit 2>/dev/null)
            if [[ -n "$FOUND_FILE" && -f "$FOUND_FILE" ]]; then
                COMPILE_H_FILE_PATH="$FOUND_FILE"
                echo "    找到文件: $COMPILE_H_FILE_PATH"
                break
            fi
          done

          if [[ -n "$COMPILE_H_FILE_PATH" && -f "$COMPILE_H_FILE_PATH" ]]; then
            echo "成功找到头文件: $PWD/$COMPILE_H_FILE_PATH"
            echo "--- $COMPILE_H_FILE_PATH 的内容 ---"
            cat "$COMPILE_H_FILE_PATH"
            echo "------------------------------------"
            if [[ -n "${EXPECTED_KBUILD_TIMESTAMP}" ]]; then
              # 尝试提取月份和日期进行部分匹配，例如 "May 15"
              TIMESTAMP_PART_TO_CHECK=$(echo "$EXPECTED_KBUILD_TIMESTAMP" | awk '{print $2 " " $3}') # 例如 "May 15"
              # 如果时间字符串包含 "UTC"，也一并检查
              if echo "$EXPECTED_KBUILD_TIMESTAMP" | grep -q "UTC"; then
                 TIMESTAMP_PART_TO_CHECK_FULL=$(echo "$EXPECTED_KBUILD_TIMESTAMP" | awk '{print $2 " " $3 " " $4 " " $5 " " $6}') # 例如 "May 15 12:30:00 UTC 2025"
              else
                 TIMESTAMP_PART_TO_CHECK_FULL=$(echo "$EXPECTED_KBUILD_TIMESTAMP" | awk '{print $2 " " $3 " " $4 " " $5}')
              fi

              if grep -Fq "$TIMESTAMP_PART_TO_CHECK" "$COMPILE_H_FILE_PATH" || grep -Fq "$TIMESTAMP_PART_TO_CHECK_FULL" "$COMPILE_H_FILE_PATH"; then
                echo "INFO: 预期的部分时间戳 ('$TIMESTAMP_PART_TO_CHECK' 或 '$TIMESTAMP_PART_TO_CHECK_FULL') 在 $COMPILE_H_FILE_PATH 中找到。"
              else
                echo "::warning:: 未在 $COMPILE_H_FILE_PATH 中找到预期的部分时间戳 ('$TIMESTAMP_PART_TO_CHECK' 或 '$TIMESTAMP_PART_TO_CHECK_FULL')。请检查上面打印的内容。"
              fi
            else
              echo "::warning:: EXPECTED_KBUILD_TIMESTAMP 未传递给此脚本，无法自动验证时间戳内容。"
            fi
          else
            echo "::error:: 未能在预期的输出路径中找到 compile.h 或 utsrelease.h。构建可能失败或输出结构不同。"
          fi
        if: always() # 无论构建是否成功都运行此步骤

      - name: 修补 Image 文件 (KPM for SukiSU - Android 12/13)
        if: env.EFFECTIVE_USE_KPM == 'true' && (env.SELECTED_ANDROID_VERSION == 'android12' || env.SELECTED_ANDROID_VERSION == 'android13') && env.SELECTED_KERNEL_VERSION != '6.6'
        run: |
          IMAGE_DIR_PATH="${{ env.CONFIG }}/out/${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}/dist"
          if [ -d "$IMAGE_DIR_PATH" ] && [ -f "$IMAGE_DIR_PATH/Image" ]; then
            cd "$IMAGE_DIR_PATH"
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch_kpm
            chmod +x patch_kpm
            ./patch_kpm 
            if [ -f "oImage" ]; then 
              mv Image Image.orig_kpm
              mv oImage Image
            fi
          fi
      - name: 修补 Image 文件 (KPM for SukiSU - Android 14/15)
        if: env.EFFECTIVE_USE_KPM == 'true' && (env.SELECTED_ANDROID_VERSION == 'android14' || env.SELECTED_ANDROID_VERSION == 'android15') && env.SELECTED_KERNEL_VERSION != '6.6'
        run: |
          IMAGE_DIR_PATH="${{ env.CONFIG }}/bazel-bin/common/kernel_aarch64/" 
          if [ -d "$IMAGE_DIR_PATH" ] && [ -f "$IMAGE_DIR_PATH/Image" ]; then
            cd "$IMAGE_DIR_PATH"
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch_kpm
            chmod +x patch_kpm
            ./patch_kpm
            if [ -f "oImage" ]; then
              mv Image Image.orig_kpm
              mv oImage Image
            fi
          fi
      - name: 将内核 Image 复制到 AnyKernel3 目录
        run: |
          IMAGE_SOURCE_PATH=""
          if [ "${{ env.SELECTED_ANDROID_VERSION }}" == "android12" ] || [ "${{ env.SELECTED_ANDROID_VERSION }}" == "android13" ]; then
            IMAGE_SOURCE_PATH="./${{ env.CONFIG }}/out/${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}/dist/Image"
          elif [ "${{ env.SELECTED_ANDROID_VERSION }}" == "android14" ] || [ "${{ env.SELECTED_ANDROID_VERSION }}" == "android15" ]; then
            IMAGE_SOURCE_PATH="./${{ env.CONFIG }}/bazel-bin/common/kernel_aarch64/Image"
          else
            exit 1
          fi
          if [ -f "$IMAGE_SOURCE_PATH" ]; then
            if [ -d "./AnyKernel3" ]; then
              cp "$IMAGE_SOURCE_PATH" ./AnyKernel3/Image
            else
              exit 1
            fi
          else
            exit 1
          fi
      - name: 上传 AnyKernel3 刷机包
        uses: actions/upload-artifact@v4
        with:
          name: |
            ${{ (env.SUKI_VERSION_NUM != '' && env.SUKI_VERSION_NUM != '00000') &&
                format('AnyKernel3_SukiSUUltra_{0}_{1}-{2}_{3}', env.SUKI_VERSION_NUM, env.SELECTED_KERNEL_VERSION, env.SELECTED_SUB_LEVEL, env.ARTIFACT_NAME_SUFFIX_PART) ||
                format('AnyKernel3_SukiSU_{0}_{1}-{2}_{3}', 'NoVer', env.SELECTED_KERNEL_VERSION, env.SELECTED_SUB_LEVEL, env.ARTIFACT_NAME_SUFFIX_PART) }}
          path: ./AnyKernel3
          if-no-files-found: error