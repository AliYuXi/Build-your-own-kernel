name: Cleanup Old Workflow Runs

on:
  schedule:
    # 每12小时执行一次。 '0 */12 * * *' 表示在每12个小时的第0分钟执行。
    # 例如，会在UTC时间的 00:00 和 12:00 执行。
    - cron: '0 */24 * * *'
  workflow_dispatch: # 允许手动触发此清理工作流，方便测试或立即执行

jobs:
  cleanup_runs:
    name: Keep Latest 5 Runs Per Workflow
    runs-on: ubuntu-latest
    permissions:
      actions: write # 非常重要：需要此权限 GITHUB_TOKEN 才能删除 workflow runs

    steps:
      - name: Delete old workflow runs
        uses: maticodes/delete-workflow-runs@v2 # 您可以检查是否有更新的版本
        with:
          # 使用 GitHub Actions 自动提供的 GITHUB_TOKEN
          # 这个 token 需要 job 级别的 `permissions: actions: write` 才能删除运行记录。
          token: ${{ secrets.GITHUB_TOKEN }}
          
          # 指定要操作的仓库，默认为当前仓库
          repository: ${{ github.repository }}
          
          # 保留运行记录的天数。
          # 为了严格按数量保留（仅保留最新的5个），我们将此设置为0。
          # 这意味着所有完成的运行记录都会被考虑删除，除非它们是受 keep_minimum_runs 保护的。
          retain_days: 0
          
          # 为每个工作流保留的最小运行次数。
          keep_minimum_runs: 5
          
          # delete_workflow_pattern: "" # 可选：如果要针对特定模式的工作流名称进行清理，可以在此指定。留空则处理所有工作流。
          # delete_run_by_conclusion_pattern: "" # 可选：如果要根据运行结论（如 'success', 'failure'）来删除，可以在此指定。留空则不按结论筛选。
          # GITHUB_EVENT_NAME 会被action用来判断是否需要人工批准，对于 schedule 和 workflow_dispatch 事件，它通常会自动批准删除。
          # dry_run: true # 进行测试时可以取消注释此行。它会列出将要删除的运行记录，但不会实际删除。